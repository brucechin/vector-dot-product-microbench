{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0","program":"/home/liankeqin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","merkle","/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=e5c96a6df8f195aa","-C","extra-filename=-e5c96a6df8f195aa","--out-dir","/home/liankeqin/TinyQuantCNN/vector-dot-microbench/target/rls/debug/deps","-L","dependency=/home/liankeqin/TinyQuantCNN/vector-dot-microbench/target/rls/debug/deps","--extern","ring=/home/liankeqin/TinyQuantCNN/vector-dot-microbench/target/rls/debug/deps/libring-a7da9c361ce30f3c.rmeta","--cap-lints","allow","-L","native=/home/liankeqin/TinyQuantCNN/vector-dot-microbench/target/rls/debug/build/ring-23ada7caee00a82b/out","--error-format=json","--sysroot","/home/liankeqin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/liankeqin/TinyQuantCNN/vector-dot-microbench/target/rls/debug/deps/libmerkle-e5c96a6df8f195aa.rmeta"},"prelude":{"crate_id":{"name":"merkle","disambiguator":[3172453882800637947,7337448113784036276]},"crate_root":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src","external_crates":[{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7603043973503281951,6245179856538753269]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[13741360846946026623,2672266499591153283]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4729845745352067521,14981637654352572000]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9324331421111590993,11905740212167270908]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11392341838745785002,13287300438441731562]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8694337109875809164,2250367951223185901]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10935849247287619708,10935329660555626336]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5583458701817410803,1770096645244614441]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4926505318506753650,8786990194761766393]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15262570485262297613,5690312430589388023]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16900335184017598038,9051488994794742296]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[528960645316233979,8037674519295179684]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4483237274112351560,17959943558012528736]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[384772052184402859,1578385820564656749]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[12301751291607961788,16569514459755551136]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[4223616801544016660,17489963460572122123]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[3882963855561891520,1067502799155491607]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":18,"id":{"name":"ring","disambiguator":[5700895018766867100,5313161996981612398]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":19,"id":{"name":"libc","disambiguator":[17931253115633936630,10484074349436537815]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":20,"id":{"name":"once_cell","disambiguator":[313546006449615912,2766671659095204214]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":21,"id":{"name":"untrusted","disambiguator":[1888350970125160938,11580975108545324550]}},{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","num":22,"id":{"name":"spin","disambiguator":[17572590295101722259,14266829631438330920]}}],"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","byte_start":0,"byte_end":815,"line_start":1,"line_end":43,"column_start":1,"column_end":11}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","byte_start":550,"byte_end":560,"line_start":27,"line_end":27,"column_start":21,"column_end":31},"alias_span":null,"name":"MerkleTree","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":194},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","byte_start":589,"byte_end":594,"line_start":30,"line_end":30,"column_start":16,"column_end":21},"alias_span":null,"name":"Proof","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":111},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","byte_start":631,"byte_end":639,"line_start":33,"line_end":33,"column_start":20,"column_end":28},"alias_span":null,"name":"Hashable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":162},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","byte_start":667,"byte_end":685,"line_start":36,"line_end":36,"column_start":16,"column_end":34},"alias_span":null,"name":"LeavesIntoIterator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":147},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","byte_start":687,"byte_end":701,"line_start":36,"line_end":36,"column_start":36,"column_end":50},"alias_span":null,"name":"LeavesIterator","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","byte_start":0,"byte_end":815,"line_start":1,"line_end":43,"column_start":1,"column_end":11},"name":"","qualname":"::","value":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"decl_id":null,"docs":" *merkle* implements a Merkle Tree in Rust.\n","sig":null,"attributes":[{"value":"deny(missing_docs, unused_qualifications, missing_debug_implementations,\n       missing_copy_implementations, trivial_casts, trivial_numeric_casts,\n       unsafe_code, unstable_features, unused_import_braces)","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","byte_start":0,"byte_end":236,"line_start":1,"line_end":11,"column_start":1,"column_end":3}},{"value":"/ *merkle* implements a Merkle Tree in Rust.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/lib.rs","byte_start":238,"byte_end":284,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":182},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":1240,"byte_end":1250,"line_start":14,"line_end":14,"column_start":12,"column_end":22},"name":"MerkleTree","qualname":"::merkletree::MerkleTree","value":"MerkleTree { algorithm }","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"decl_id":null,"docs":" A Merkle tree is a binary tree, with values of type `T` at the leafs,\n and where every internal node holds the hash of the concatenation of the hashes of its children nodes.\n","sig":null,"attributes":[{"value":"/ A Merkle tree is a binary tree, with values of type `T` at the leafs,","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":1024,"byte_end":1097,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ and where every internal node holds the hash of the concatenation of the hashes of its children nodes.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":1098,"byte_end":1204,"line_start":12,"line_end":12,"column_start":1,"column_end":107}}]},{"kind":"Field","id":{"krate":0,"index":184},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":1319,"byte_end":1328,"line_start":16,"line_end":16,"column_start":9,"column_end":18},"name":"algorithm","qualname":"::merkletree::MerkleTree::algorithm","value":"&'static ring::digest::Algorithm","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" The hashing algorithm used by this Merkle tree\n","sig":null,"attributes":[{"value":"/ The hashing algorithm used by this Merkle tree","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":1260,"byte_end":1310,"line_start":15,"line_end":15,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":2890,"byte_end":2898,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<MerkleTree<T>>::from_vec","value":"pub fn from_vec(&'static Algorithm, Vec<T>) -> Self where T: Hashable","parent":null,"children":[],"decl_id":null,"docs":" Constructs a Merkle Tree from a vector of data blocks.\n Returns `None` if `values` is empty.\n","sig":null,"attributes":[{"value":"/ Constructs a Merkle Tree from a vector of data blocks.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":2775,"byte_end":2833,"line_start":68,"line_end":68,"column_start":5,"column_end":63}},{"value":"/ Returns `None` if `values` is empty.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":2838,"byte_end":2878,"line_start":69,"line_end":69,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":4448,"byte_end":4457,"line_start":131,"line_end":131,"column_start":12,"column_end":21},"name":"root_hash","qualname":"<MerkleTree<T>>::root_hash","value":"pub fn root_hash(&Self) -> &Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns the root hash of Merkle tree\n","sig":null,"attributes":[{"value":"/ Returns the root hash of Merkle tree","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":4396,"byte_end":4436,"line_start":130,"line_end":130,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":4564,"byte_end":4570,"line_start":136,"line_end":136,"column_start":12,"column_end":18},"name":"height","qualname":"<MerkleTree<T>>::height","value":"pub fn height(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the height of Merkle tree\n","sig":null,"attributes":[{"value":"/ Returns the height of Merkle tree","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":4515,"byte_end":4552,"line_start":135,"line_end":135,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":4683,"byte_end":4688,"line_start":141,"line_end":141,"column_start":12,"column_end":17},"name":"count","qualname":"<MerkleTree<T>>::count","value":"pub fn count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of leaves in the Merkle tree\n","sig":null,"attributes":[{"value":"/ Returns the number of leaves in the Merkle tree","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":4620,"byte_end":4671,"line_start":140,"line_end":140,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":4800,"byte_end":4808,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<MerkleTree<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the Merkle tree is empty or not\n","sig":null,"attributes":[{"value":"/ Returns whether the Merkle tree is empty or not","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":4737,"byte_end":4788,"line_start":145,"line_end":145,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":4995,"byte_end":5004,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"gen_proof","qualname":"<MerkleTree<T>>::gen_proof","value":"pub fn gen_proof(&Self, T) -> Option<Proof<T>> where T: Hashable","parent":null,"children":[],"decl_id":null,"docs":" Generate an inclusion proof for the given value.\n Returns `None` if the given value is not found in the tree.\n","sig":null,"attributes":[{"value":"/ Generate an inclusion proof for the given value.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":4863,"byte_end":4915,"line_start":150,"line_end":150,"column_start":5,"column_end":57}},{"value":"/ Returns `None` if the given value is not found in the tree.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":4920,"byte_end":4983,"line_start":151,"line_end":151,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":5398,"byte_end":5411,"line_start":164,"line_end":164,"column_start":12,"column_end":25},"name":"gen_nth_proof","qualname":"<MerkleTree<T>>::gen_nth_proof","value":"pub fn gen_nth_proof(&Self, usize) -> Option<Proof<T>> where T: Hashable +\nClone","parent":null,"children":[],"decl_id":null,"docs":" Generate an inclusion proof for the `n`-th leaf value.\n","sig":null,"attributes":[{"value":"/ Generate an inclusion proof for the `n`-th leaf value.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":5328,"byte_end":5386,"line_start":163,"line_end":163,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":5789,"byte_end":5793,"line_start":174,"line_end":174,"column_start":12,"column_end":16},"name":"iter","qualname":"<MerkleTree<T>>::iter","value":"pub fn iter(&Self) -> LeavesIterator<, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an `Iterator` over the values contained in this Merkle tree.\n","sig":null,"attributes":[{"value":"/ Creates an `Iterator` over the values contained in this Merkle tree.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":5705,"byte_end":5777,"line_start":173,"line_end":173,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":194},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":6863,"byte_end":6868,"line_start":13,"line_end":13,"column_start":12,"column_end":17},"name":"Proof","qualname":"::proof::Proof","value":"Proof { algorithm, root_hash, lemma, value }","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199}],"decl_id":null,"docs":" An inclusion proof represent the fact that a `value` is a member\n of a `MerkleTree` with root hash `root_hash`, and hash function `algorithm`.\n","sig":null,"attributes":[{"value":"/ An inclusion proof represent the fact that a `value` is a member","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":6601,"byte_end":6669,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ of a `MerkleTree` with root hash `root_hash`, and hash function `algorithm`.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":6670,"byte_end":6750,"line_start":10,"line_end":10,"column_start":1,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":196},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":7028,"byte_end":7037,"line_start":16,"line_end":16,"column_start":9,"column_end":18},"name":"algorithm","qualname":"::proof::Proof::algorithm","value":"&'static ring::digest::Algorithm","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" The hashing algorithm used in the original `MerkleTree`\n","sig":null,"attributes":[{"value":"/ The hashing algorithm used in the original `MerkleTree`","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":6878,"byte_end":6937,"line_start":14,"line_end":14,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":197},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":7126,"byte_end":7135,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"root_hash","qualname":"::proof::Proof::root_hash","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" The hash of the root of the original `MerkleTree`\n","sig":null,"attributes":[{"value":"/ The hash of the root of the original `MerkleTree`","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":7064,"byte_end":7117,"line_start":18,"line_end":18,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":198},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":7196,"byte_end":7201,"line_start":22,"line_end":22,"column_start":9,"column_end":14},"name":"lemma","qualname":"::proof::Proof::lemma","value":"proof::Lemma","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" The first `Lemma` of the `Proof`\n","sig":null,"attributes":[{"value":"/ The first `Lemma` of the `Proof`","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":7151,"byte_end":7187,"line_start":21,"line_end":21,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":199},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":7263,"byte_end":7268,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"name":"value","qualname":"::proof::Proof::value","value":"T","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" The value concerned by this `Proof`\n","sig":null,"attributes":[{"value":"/ The value concerned by this `Proof`","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":7215,"byte_end":7254,"line_start":24,"line_end":24,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10786,"byte_end":10789,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"new","qualname":"<Proof<T>>::new","value":"pub fn new(&'static Algorithm, Vec<u8>, Lemma, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Proof`\n","sig":null,"attributes":[{"value":"/ Constructs a new `Proof`","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10746,"byte_end":10774,"line_start":135,"line_end":135,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11128,"byte_end":11136,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"validate","qualname":"<Proof<T>>::validate","value":"pub fn validate(&Self, &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this inclusion proof is well-formed,\n and whether its root hash matches the given `root_hash`.\n","sig":null,"attributes":[{"value":"/ Checks whether this inclusion proof is well-formed,","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10996,"byte_end":11051,"line_start":145,"line_end":145,"column_start":5,"column_end":60}},{"value":"/ and whether its root hash matches the given `root_hash`.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11056,"byte_end":11116,"line_start":146,"line_end":146,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11541,"byte_end":11546,"line_start":160,"line_end":160,"column_start":12,"column_end":17},"name":"index","qualname":"<Proof<T>>::index","value":"pub fn index(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of this proof's value, given the total number of items in the tree.","sig":null,"attributes":[{"value":"/ Returns the index of this proof's value, given the total number of items in the tree.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11342,"byte_end":11431,"line_start":155,"line_end":155,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11436,"byte_end":11439,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11444,"byte_end":11456,"line_start":157,"line_end":157,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11461,"byte_end":11464,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ Panics if the proof is malformed. Call `validate` first.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11469,"byte_end":11529,"line_start":159,"line_end":159,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":206},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11958,"byte_end":11963,"line_start":170,"line_end":170,"column_start":12,"column_end":17},"name":"Lemma","qualname":"::proof::Lemma","value":"Lemma { node_hash, sibling_hash, sub_lemma }","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209}],"decl_id":null,"docs":" A `Lemma` holds the hash of a node, the hash of its sibling node,\n and a sub lemma, whose `node_hash`, when combined with this `sibling_hash`\n must be equal to this `node_hash`.\n","sig":null,"attributes":[{"value":"/ A `Lemma` holds the hash of a node, the hash of its sibling node,","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11620,"byte_end":11689,"line_start":165,"line_end":165,"column_start":1,"column_end":70}},{"value":"/ and a sub lemma, whose `node_hash`, when combined with this `sibling_hash`","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11690,"byte_end":11768,"line_start":166,"line_end":166,"column_start":1,"column_end":79}},{"value":"/ must be equal to this `node_hash`.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11769,"byte_end":11807,"line_start":167,"line_end":167,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":207},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":11974,"byte_end":11983,"line_start":171,"line_end":171,"column_start":9,"column_end":18},"name":"node_hash","qualname":"::proof::Lemma::node_hash","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":206},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":208},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12002,"byte_end":12014,"line_start":172,"line_end":172,"column_start":9,"column_end":21},"name":"sibling_hash","qualname":"::proof::Lemma::sibling_hash","value":"std::option::Option<proof::Positioned<std::vec::Vec<u8>>>","parent":{"krate":0,"index":206},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":209},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12053,"byte_end":12062,"line_start":173,"line_end":173,"column_start":9,"column_end":18},"name":"sub_lemma","qualname":"::proof::Lemma::sub_lemma","value":"std::option::Option<std::boxed::Box<proof::Lemma>>","parent":{"krate":0,"index":206},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12225,"byte_end":12228,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"name":"new","qualname":"<Lemma>::new","value":"pub fn new<T>(&Tree<T>, &[u8]) -> Option<Lemma>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to generate a proof that the a value with hash `needle` is a\n member of the given `tree`.\n","sig":null,"attributes":[{"value":"/ Attempts to generate a proof that the a value with hash `needle` is a","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12104,"byte_end":12177,"line_start":177,"line_end":177,"column_start":5,"column_end":78}},{"value":"/ member of the given `tree`.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12182,"byte_end":12213,"line_start":178,"line_end":178,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12899,"byte_end":12911,"line_start":197,"line_end":197,"column_start":12,"column_end":24},"name":"new_by_index","qualname":"<Lemma>::new_by_index","value":"pub fn new_by_index<T>(&Tree<T>, usize, usize) -> Option<(Lemma, &T)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to generate a proof that the `idx`-th leaf is a member of\n the given tree. The `count` must equal the number of leaves in the\n `tree`. If `idx >= count`, `None` is returned. Otherwise it returns\n the new `Lemma` and the `idx`-th value.\n","sig":null,"attributes":[{"value":"/ Attempts to generate a proof that the `idx`-th leaf is a member of","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12618,"byte_end":12688,"line_start":193,"line_end":193,"column_start":5,"column_end":75}},{"value":"/ the given tree. The `count` must equal the number of leaves in the","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12693,"byte_end":12763,"line_start":194,"line_end":194,"column_start":5,"column_end":75}},{"value":"/ `tree`. If `idx >= count`, `None` is returned. Otherwise it returns","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12768,"byte_end":12839,"line_start":195,"line_end":195,"column_start":5,"column_end":76}},{"value":"/ the new `Lemma` and the `idx`-th value.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12844,"byte_end":12887,"line_start":196,"line_end":196,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":14760,"byte_end":14765,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"index","qualname":"<Lemma>::index","value":"pub fn index(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of this lemma's value, given the total number of items in the tree.","sig":null,"attributes":[{"value":"/ Returns the index of this lemma's value, given the total number of items in the tree.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":14555,"byte_end":14644,"line_start":246,"line_end":246,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":14649,"byte_end":14652,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":14657,"byte_end":14669,"line_start":248,"line_end":248,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":14674,"byte_end":14677,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Panics if the lemma is malformed. Call `validate_lemma` first.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":14682,"byte_end":14748,"line_start":250,"line_end":250,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":242},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":17585,"byte_end":17589,"line_start":328,"line_end":328,"column_start":5,"column_end":9},"name":"Left","qualname":"::proof::Positioned::Left","value":"Positioned::Left(T)","parent":{"krate":0,"index":240},"children":[],"decl_id":null,"docs":" The value was found in the left branch\n","sig":null,"attributes":[{"value":"/ The value was found in the left branch","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":17538,"byte_end":17580,"line_start":327,"line_end":327,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":245},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":17647,"byte_end":17652,"line_start":331,"line_end":331,"column_start":5,"column_end":10},"name":"Right","qualname":"::proof::Positioned::Right","value":"Positioned::Right(T)","parent":{"krate":0,"index":240},"children":[],"decl_id":null,"docs":" The value was found in the right branch\n","sig":null,"attributes":[{"value":"/ The value was found in the right branch","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":17599,"byte_end":17642,"line_start":330,"line_end":330,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":240},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":17518,"byte_end":17528,"line_start":326,"line_end":326,"column_start":10,"column_end":20},"name":"Positioned","qualname":"::proof::Positioned","value":"pub enum Positioned<T> {\n\n    /// The value was found in the left branch\n    Left(T),\n\n    /// The value was found in the right branch\n    Right(T),\n}","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":245}],"decl_id":null,"docs":" Tags a value so that we know from which branch of a `Tree` (if any) it was found.\n","sig":null,"attributes":[{"value":"/ Tags a value so that we know from which branch of a `Tree` (if any) it was found.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":17284,"byte_end":17369,"line_start":323,"line_end":323,"column_start":1,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":111},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18359,"byte_end":18367,"line_start":23,"line_end":23,"column_start":11,"column_end":19},"name":"Hashable","qualname":"::hashutils::Hashable","value":"Hashable","parent":null,"children":[{"krate":0,"index":112}],"decl_id":null,"docs":" The type of values stored in a `MerkleTree` must implement\n this trait, in order for them to be able to be fed\n to a Ring `Context` when computing the hash of a leaf.","sig":null,"attributes":[{"value":"/ The type of values stored in a `MerkleTree` must implement","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":17717,"byte_end":17779,"line_start":3,"line_end":3,"column_start":1,"column_end":63}},{"value":"/ this trait, in order for them to be able to be fed","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":17780,"byte_end":17834,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/ to a Ring `Context` when computing the hash of a leaf.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":17835,"byte_end":17893,"line_start":5,"line_end":5,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":17894,"byte_end":17897,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ A default instance for types that already implements","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":17898,"byte_end":17954,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/ `AsRef<[u8]>` is provided.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":17955,"byte_end":17985,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":17986,"byte_end":17989,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":17990,"byte_end":18004,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18005,"byte_end":18008,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Here is an example of how to implement `Hashable` for a type","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18009,"byte_end":18073,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/ that does not (or cannot) implement `AsRef<[u8]>`:","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18074,"byte_end":18128,"line_start":13,"line_end":13,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18129,"byte_end":18132,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18133,"byte_end":18146,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/ impl Hashable for PublicKey {","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18147,"byte_end":18180,"line_start":16,"line_end":16,"column_start":1,"column_end":34}},{"value":"/     fn update_context(&self, context: &mut Context) {","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18181,"byte_end":18238,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/         let bytes: Vec<u8> = self.to_bytes();","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18239,"byte_end":18288,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/         context.update(&bytes);","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18289,"byte_end":18324,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/     }","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18325,"byte_end":18334,"line_start":20,"line_end":20,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18335,"byte_end":18340,"line_start":21,"line_end":21,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18341,"byte_end":18348,"line_start":22,"line_end":22,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18499,"byte_end":18513,"line_start":27,"line_end":27,"column_start":8,"column_end":22},"name":"update_context","qualname":"::hashutils::Hashable::update_context","value":"pub fn update_context(&Self, &mut Context)","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Update the given `context` with `self`.","sig":null,"attributes":[{"value":"/ Update the given `context` with `self`.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18374,"byte_end":18417,"line_start":24,"line_end":24,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18422,"byte_end":18425,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ See `ring::digest::Context::update` for more information.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18430,"byte_end":18491,"line_start":26,"line_end":26,"column_start":5,"column_end":66}}]},{"kind":"StructVariant","id":{"krate":0,"index":281},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20240,"byte_end":20245,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"Empty","qualname":"::tree::Tree::Empty","value":"Tree::Empty { hash }","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":283},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20283,"byte_end":20287,"line_start":14,"line_end":14,"column_start":5,"column_end":9},"name":"Leaf","qualname":"::tree::Tree::Leaf","value":"Tree::Leaf { hash, value }","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":286},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20343,"byte_end":20347,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"name":"Node","qualname":"::tree::Tree::Node","value":"Tree::Node { hash, left, right }","parent":{"krate":0,"index":279},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":279},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20226,"byte_end":20230,"line_start":9,"line_end":9,"column_start":10,"column_end":14},"name":"Tree","qualname":"::tree::Tree","value":"pub enum Tree<T> {\n    Empty {\n        hash: Vec<u8>,\n    },\n    Leaf {\n        hash: Vec<u8>,\n        value: T,\n    },\n    Node {\n        hash: Vec<u8>,\n        left: Box<Tree<T>>,\n        right: Box<Tree<T>>,\n    },\n}","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":286}],"decl_id":null,"docs":" Binary Tree where leaves hold a stand-alone value.\n","sig":null,"attributes":[{"value":"/ Binary Tree where leaves hold a stand-alone value.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20100,"byte_end":20154,"line_start":7,"line_end":7,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20498,"byte_end":20503,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"empty","qualname":"<Tree<T>>::empty","value":"pub fn empty(Digest) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an empty tree\n","sig":null,"attributes":[{"value":"/ Create an empty tree","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20462,"byte_end":20486,"line_start":27,"line_end":27,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20644,"byte_end":20647,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Tree<T>>::new","value":"pub fn new(Digest, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new tree\n","sig":null,"attributes":[{"value":"/ Create a new tree","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20611,"byte_end":20632,"line_start":34,"line_end":34,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20816,"byte_end":20824,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"name":"new_leaf","qualname":"<Tree<T>>::new_leaf","value":"pub fn new_leaf(&'static Algorithm, T) -> Tree<T> where T: Hashable","parent":null,"children":[],"decl_id":null,"docs":" Create a new leaf\n","sig":null,"attributes":[{"value":"/ Create a new leaf","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20783,"byte_end":20804,"line_start":42,"line_end":42,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":21039,"byte_end":21043,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"hash","qualname":"<Tree<T>>::hash","value":"pub fn hash(&Self) -> &Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Returns a hash from the tree.\n","sig":null,"attributes":[{"value":"/ Returns a hash from the tree.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20994,"byte_end":21027,"line_start":51,"line_end":51,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":21325,"byte_end":21329,"line_start":61,"line_end":61,"column_start":12,"column_end":16},"name":"iter","qualname":"<Tree<T>>::iter","value":"pub fn iter(&Self) -> LeavesIterator<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowing iterator over the leaves of the tree.\n","sig":null,"attributes":[{"value":"/ Returns a borrowing iterator over the leaves of the tree.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":21252,"byte_end":21313,"line_start":60,"line_end":60,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":147},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":21572,"byte_end":21586,"line_start":69,"line_end":69,"column_start":12,"column_end":26},"name":"LeavesIterator","qualname":"::tree::LeavesIterator","value":"LeavesIterator {  }","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151}],"decl_id":null,"docs":" An borrowing iterator over the leaves of a `Tree`.\n Adapted from http://codereview.stackexchange.com/q/110283.\n","sig":null,"attributes":[{"value":"/ An borrowing iterator over the leaves of a `Tree`.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":21403,"byte_end":21457,"line_start":66,"line_end":66,"column_start":1,"column_end":55}},{"value":"/ Adapted from http://codereview.stackexchange.com/q/110283.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":21458,"byte_end":21520,"line_start":67,"line_end":67,"column_start":1,"column_end":63}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":21521,"byte_end":21560,"line_start":68,"line_end":68,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":162},"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":22960,"byte_end":22978,"line_start":131,"line_end":131,"column_start":12,"column_end":30},"name":"LeavesIntoIterator","qualname":"::tree::LeavesIntoIterator","value":"LeavesIntoIterator {  }","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165}],"decl_id":null,"docs":" An iterator over the leaves of a `Tree`.\n","sig":null,"attributes":[{"value":"/ An iterator over the leaves of a `Tree`.","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":22864,"byte_end":22908,"line_start":129,"line_end":129,"column_start":1,"column_end":45}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":22909,"byte_end":22948,"line_start":130,"line_end":130,"column_start":1,"column_end":40}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":1563,"byte_end":1573,"line_start":28,"line_end":28,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":1894,"byte_end":1904,"line_start":38,"line_end":38,"column_start":20,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":1940,"byte_end":1950,"line_start":40,"line_end":40,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":2087,"byte_end":2097,"line_start":46,"line_end":46,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":2472,"byte_end":2482,"line_start":57,"line_end":57,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":2755,"byte_end":2765,"line_start":67,"line_end":67,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":5883,"byte_end":5893,"line_start":179,"line_end":179,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":9939,"byte_end":9944,"line_start":103,"line_end":103,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10123,"byte_end":10128,"line_start":109,"line_end":109,"column_start":20,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10164,"byte_end":10169,"line_start":111,"line_end":111,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10301,"byte_end":10306,"line_start":117,"line_end":117,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10556,"byte_end":10561,"line_start":126,"line_end":126,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10731,"byte_end":10736,"line_start":134,"line_end":134,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12092,"byte_end":12097,"line_start":176,"line_end":176,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18582,"byte_end":18583,"line_start":30,"line_end":30,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":19373,"byte_end":19382,"line_start":55,"line_end":55,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20448,"byte_end":20452,"line_start":26,"line_end":26,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":21697,"byte_end":21711,"line_start":77,"line_end":77,"column_start":13,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":22604,"byte_end":22618,"line_start":115,"line_end":115,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":23056,"byte_end":23074,"line_start":136,"line_end":136,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":23868,"byte_end":23886,"line_start":170,"line_end":170,"column_start":22,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":24145,"byte_end":24149,"line_start":184,"line_end":184,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":1563,"byte_end":1573,"line_start":28,"line_end":28,"column_start":34,"column_end":44},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":182},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":1894,"byte_end":1904,"line_start":38,"line_end":38,"column_start":20,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":182},"to":{"krate":2,"index":1702}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":1940,"byte_end":1950,"line_start":40,"line_end":40,"column_start":29,"column_end":39},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":182},"to":{"krate":2,"index":1734}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":2087,"byte_end":2097,"line_start":46,"line_end":46,"column_start":22,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":182},"to":{"krate":2,"index":1723}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":2472,"byte_end":2482,"line_start":57,"line_end":57,"column_start":24,"column_end":34},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":182},"to":{"krate":2,"index":6503}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":2755,"byte_end":2765,"line_start":67,"line_end":67,"column_start":9,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/merkletree.rs","byte_start":5883,"byte_end":5893,"line_start":179,"line_end":179,"column_start":26,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":182},"to":{"krate":2,"index":4949}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":9939,"byte_end":9944,"line_start":103,"line_end":103,"column_start":34,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":194},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10123,"byte_end":10128,"line_start":109,"line_end":109,"column_start":20,"column_end":25},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":194},"to":{"krate":2,"index":1702}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10164,"byte_end":10169,"line_start":111,"line_end":111,"column_start":29,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":194},"to":{"krate":2,"index":1734}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10301,"byte_end":10306,"line_start":117,"line_end":117,"column_start":22,"column_end":27},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":194},"to":{"krate":2,"index":1723}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10556,"byte_end":10561,"line_start":126,"line_end":126,"column_start":24,"column_end":29},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":194},"to":{"krate":2,"index":6503}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":10731,"byte_end":10736,"line_start":134,"line_end":134,"column_start":9,"column_end":14},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":194},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/proof.rs","byte_start":12092,"byte_end":12097,"line_start":176,"line_end":176,"column_start":6,"column_end":11},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":206},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":18582,"byte_end":18583,"line_start":30,"line_end":30,"column_start":35,"column_end":36},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":114},"to":{"krate":0,"index":111}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/hashutils.rs","byte_start":19373,"byte_end":19382,"line_start":55,"line_end":55,"column_start":20,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":18,"index":1290},"to":{"krate":0,"index":116}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":20448,"byte_end":20452,"line_start":26,"line_end":26,"column_start":9,"column_end":13},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":21697,"byte_end":21711,"line_start":77,"line_end":77,"column_start":13,"column_end":27},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":22604,"byte_end":22618,"line_start":115,"line_end":115,"column_start":26,"column_end":40},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":147},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":23056,"byte_end":23074,"line_start":136,"line_end":136,"column_start":9,"column_end":27},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":162},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":23868,"byte_end":23886,"line_start":170,"line_end":170,"column_start":22,"column_end":40},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":162},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/liankeqin/.cargo/registry/src/github.com-1ecc6299db9ec823/merkle-1.11.0/src/tree.rs","byte_start":24145,"byte_end":24149,"line_start":184,"line_end":184,"column_start":26,"column_end":30},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":279},"to":{"krate":2,"index":4949}}]}